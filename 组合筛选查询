组合筛选用到知识很多，也很神奇就出现功能了，这里做个记录

先有如下一个models.py UserInfo表
'''
class UserInfo(models.Model):
    name = models.CharField(verbose_name="用户名",max_length=32)
    pwd = models.CharField(verbose_name="密码",max_length=32)

    gender_choices = (
        (1,'男'),
        (2,'女'),
    )
    gender = models.IntegerField(verbose_name="性别",choices=gender_choices,default=2)

    status_choices = (
        (1,"在线"),
        (2,"离线")
    )
    status = models.IntegerField(verbose_name="状态",choices=status_choices,default=1)

    dp = models.ForeignKey(verbose_name="部门",to="DePart")
    class Meta:
        verbose_name_plural="用户表"
    def __str__(self):
        return self.name
'''

一、 ORM models.py相关知识

models.UserInfo._meta.get_field[]

1 先来理解这句话'''gender = models.IntegerField(verbose_name="性别",choices=gender_choices,default=2) '''

   gender是一个models.IntegerField对象，里面封装了(verbose_name="性别",choices=gender_choices,default=2)值
   那么gender就有属性verbose_name/choices/default/
 
    models.UserInfo._meta.app_label   获取表的应用app01
    models.UserInfo._meta.model_name  获取表的小写名称userinfo

    models.UserInfo._meta.get_field("gender").choices       # 获取属性
    models.UserInfo._meta.get_field("gender").verbose_name  # 获取属性
    models.UserInfo._meta.get_field('dp').rel.to  #获取外键的表对象app01.models.DePart
    
    那么就有神奇的一步：
    L = ['gender','status']
    for n in L:
        _filed = models.UserInfo._meta.get_field(n)  # _field 就是app01.UserInfo.gender的django.db.models.fields.IntegerField类型
        print(_field.choices)


2 再来理解这句话'''dp = models.ForeignKey(verbose_name="部门",to="DePart")'''
     
    L = ['dp']   
    for n in L:
        _filed = models.UserInfo._meta.get_field(n)  # _field 就是app01.UserInfo.gender的django.db.models.fields.ForeignKey类型
        print(_field.verbose_name)
        print(type(_field))    # 可以看到ForeignKey类型
        from django.db.models.fields import ForeignKey
        if type(_field) == ForeignKey:
            #如dp外键这种就要 跨表找数据: 
            #_field.rel.to 就是dp对应的"DePart"表app01.models.DePart
            
            yield Foo(_field.rel.to.objects.all())   # 跨表找数据
        else: #还可以再做判断
            yield Foo(_field.choices, is_choice=True)   # 其实封装的元组 ((1,"在线"), (2,"离线"))




class Foo():
   def __init__(self,queryset,is_choice=False):
       self.queryset = queryset
       self.is_choice = is_choice

   def __iter__(self):
       yield '<a>全部</a>'
       for row in self.queryset:
           if self.is_choice:  # self.queryset = ((1,"在线"), (2,"离线"))
                nid=obj[0]
                text = obj[1]
                yield mark_safe('<a>{0}</a>'.format(text))
            else:
                text = str(obj)  # obj就是dp对象，str()执行DePart的__str__()方法
                yield mark_safe('<a>{0}</a>'.format(text))


二、生成器、迭代器、可迭代对象
    迭代器：能够作用于next()函数，不断向后返回值，称为迭代器 iter([1,2,3,4])
    生成器：yield返回，并且可以next(),是一种特殊的迭代器
    可迭代对象：对象或一个类中有__iter__()方法，并返回迭代器(包括生成器),那么这个对象可for循环

1 定义生成器函数
def f1():
    for i in range(1,4):
        yield i

def f2():
    yield 'a'
    yield  from f1()
    yield 'b'

print(list(f2()))

2 生成器函数即是可迭代对象，也是迭代器
from collections import Iterator
from collections import Iterable
from collections import Generator

def f1():
    yield 1
    yield 2

print(isinstance(f1(), Generator))  # true
print(isinstance(f1(), Iterable))   # true
print(isinstance(f1(), Iterator))   # true

3 生成器函数也可以强制转换为Terator迭代器
def f1():
    yield 1
    yield 2
    
x=iter(f1())    # 转为迭代器
print(isinstance(x,Iterator))   

4  列表是可以可迭代对象，可以强制转换为迭代器
def f1():
    return [1,2,3]

x=iter(f1())    # 转为迭代器
print(isinstance(x,Iterator))

5 高级应用
class Foo():
   def __init__(self,queryset,is_choice=False):
       self.queryset = queryset
       self.is_choice = is_choice

   def __iter__(self):
       yield '<a>全部</a>'
       for row in self.queryset:
           yield mark_safe('<a>运营</a>')
      
class Changelist():
    def __init__(self,config):
        self.comb_filter = config.comb_filter
    # def show_comb_search(self, ):   # 这里循环好了数据，但前端还要循环一次，很不好，我们把这里变为生成器不是很good么,天才
    #     result = []
    #     for name in self.comb_filter:  # ['gender','status','dp']
    #         row = Foo(models.UserInfo.objects.all())  # 所有用户变为一个列表或可循环对象
    #         result.append(row)
    def show_comb_search(self, ):
        for name in self.comb_filter:  # ['gender','status','dp']
            yield Foo(models.UserInfo.objects.all())  # 所有用户变为一个列表或可循环对象,直接yield
   

三、URL写入组合筛选
request,name
self.name = name
self.params = copy.deepcopy(request.GET)
self.params._mutable = True


from django.http import QueryDict
QueryDict.pop()

